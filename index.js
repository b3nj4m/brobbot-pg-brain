// Generated by CoffeeScript 1.9.0
(function() {
  var Brain, PgBrain, Q, Url, User, pg, _, _ref,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  _ref = require('brobbot'), Brain = _ref.Brain, User = _ref.User;

  Url = require("url");

  pg = require("pg")["native"];

  Q = require("q");

  _ = require("lodash");

  PgBrain = (function(_super) {
    __extends(PgBrain, _super);

    function PgBrain(_at_robot) {
      var envVal, envVar, pgUrl, pgUrlEnv, _i, _len, _ref1, _ref2;
      this.robot = _at_robot;
      PgBrain.__super__.constructor.call(this, this.robot);
      this.currentTransaction = Q();
      pgUrl = null;
      pgUrlEnv = null;
      _ref1 = process.env;
      for (envVar in _ref1) {
        if (!__hasProp.call(_ref1, envVar)) continue;
        envVal = _ref1[envVar];
        if (/^HEROKU_POSTGRESQL_[A-Z0-9]+_URL$/.test(envVar)) {
          pgUrlEnv = envVar;
          pgUrl = envVal;
          break;
        }
      }
      if (!pgUrl) {
        _ref2 = ['POSTGRESQL_URL', 'DATABASE_URL'];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          envVar = _ref2[_i];
          if (process.env[envVar]) {
            pgUrlEnv = envVar;
            pgUrl = process.env[envVar];
            break;
          }
        }
      }
      pgUrl = pgUrl || 'postgres://user:password@localhost/brobbot';
      if (pgUrlEnv) {
        this.robot.logger.info("Discovered pg from " + pgUrlEnv + " environment variable");
      } else {
        this.robot.logger.info("Using default pg on localhost");
      }
      this.info = Url.parse(pgUrl, true);
      this.prefix = process.env.BROBBOT_PG_DATA_PREFIX || 'data';
      this.prefixRegex = new RegExp("^" + this.prefix + ":");
      this.tableName = process.env.BROBBOT_PG_TABLE_NAME || 'brobbot';
      this.client = new pg.Client(pgUrl);
      this.connected = Q.ninvoke(this.client, 'connect');
      this.connected.then((function(_this) {
        return function() {
          return _this.robot.logger.info("Successfully connected to pg");
        };
      })(this));
      this.connected.fail((function(_this) {
        return function(err) {
          return _this.robot.logger.error("Failed to connect to pg: " + err);
        };
      })(this));
      this.ready = this.connected.then((function(_this) {
        return function() {
          return _this.checkVersion();
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.initTable();
        };
      })(this));
    }

    PgBrain.prototype.checkVersion = function() {
      var query;
      query = "SELECT VERSION()";
      return Q.ninvoke(this.client, 'query', query).then((function(_this) {
        return function(results) {
          if (results.rows.length === 0 || !parseFloat(results.rows[0].version.replace(/^postgresql /i)) >= 9.4) {
            return _this.robbot.logger.error("Postgres version must be at least 9.4");
          }
        };
      })(this));
    };

    PgBrain.prototype.initTable = function() {
      var query;
      query = "CREATE TABLE IF NOT EXISTS " + this.tableName + " (key varchar(255) NOT NULL, subkey varchar(255), isset boolean not null default false, value jsonb, UNIQUE (key, subkey))";
      return Q.ninvoke(this.client, 'query', query);
    };

    PgBrain.prototype.transaction = function(fn) {
      return this.currentTransaction = this.currentTransaction.then((function(_this) {
        return function() {
          return _this.runTransaction(fn);
        };
      })(this));
    };

    PgBrain.prototype.runTransaction = function(fn) {
      return this.query("BEGIN").then(fn).then((function(_this) {
        return function(result) {
          return _this.query("COMMIT").then(function() {
            return result;
          });
        };
      })(this)).fail((function(_this) {
        return function(err) {
          return _this.query("COMMIT").then(function() {
            throw err;
          });
        };
      })(this));
    };

    PgBrain.prototype.query = function(query, params) {
      return this.ready.then((function(_this) {
        return function() {
          return Q.ninvoke(_this.client, 'query', query, params).then(function(results) {
            return results.rows;
          }).fail(function(err) {
            _this.robot.logger.error('PGSQL error:', err.stack);
            return null;
          });
        };
      })(this));
    };

    PgBrain.prototype.updateValue = function(key, value, isSet) {
      if (isSet == null) {
        isSet = false;
      }
      return this.keyExists(key).then((function(_this) {
        return function(exists) {
          value = _this.serialize(value);
          if (exists) {
            return _this.query("UPDATE " + _this.tableName + " SET value = $1 WHERE key = $2", [value, key]);
          } else {
            return _this.query("INSERT INTO " + _this.tableName + " (key, value, isset) VALUES ($1, $2, $3)", [key, value, isSet]);
          }
        };
      })(this));
    };

    PgBrain.prototype.updateSubValue = function(key, subkey, value) {
      value = this.serialize(value);
      return this.subkeyExists(key, subkey).then((function(_this) {
        return function(exists) {
          if (exists) {
            return _this.query("UPDATE " + _this.tableName + " SET value = $1 WHERE key = $2 AND subkey = $3", [value, key, subkey]);
          } else {
            return _this.query("INSERT INTO " + _this.tableName + " (key, value, subkey) VALUES ($1, $2, $3)", [key, value, subkey]);
          }
        };
      })(this));
    };

    PgBrain.prototype.getValues = function(key, subkey) {
      var params, subkeyPart;
      params = [key];
      subkeyPart = "";
      if (subkey != null) {
        subkeyPart = "AND subkey = $2";
        params.push(subkey);
      }
      return this.query("SELECT value FROM " + this.tableName + " WHERE key = $1 " + subkeyPart, params).then((function(_this) {
        return function(results) {
          return _.map(results, function(result) {
            return _this.deserialize(result.value);
          });
        };
      })(this));
    };

    PgBrain.prototype.reset = function() {
      return this.query("DELETE FROM " + this.tableName).then(function() {
        return Q();
      });
    };

    PgBrain.prototype.llen = function(key) {
      return this.query("SELECT jsonb_array_length(value) AS length FROM " + this.tableName + " WHERE key = $1 AND value @> '[]'", [this.key(key)]).then(function(results) {
        var _ref1;
        return ((_ref1 = results[0]) != null ? _ref1.length : void 0) || 0;
      });
    };

    PgBrain.prototype.lset = function(key, index, value) {
      return this.transaction((function(_this) {
        return function() {
          return _this.lgetall(key).then(function(values) {
            values = values || [];
            values[index] = value;
            return _this.updateValue(_this.key(key), values);
          });
        };
      })(this));
    };

    PgBrain.prototype.lfindindex = function(values, value) {
      var serializedValue;
      serializedValue = this.serialize(value);
      return _.findIndex(values, (function(_this) {
        return function(value) {
          return _this.serialize(value) === serializedValue;
        };
      })(this));
    };

    PgBrain.prototype.linsert = function(key, placement, pivot, value) {
      return this.transaction((function(_this) {
        return function() {
          return _this.lgetall(key).then(function(values) {
            var idx;
            idx = _this.lfindindex(values, pivot);
            if (idx === -1) {
              return -1;
            }
            if (placement === 'AFTER') {
              idx = idx + 1;
            }
            values.splice(idx, 0, value);
            return _this.updateValue(_this.key(key), values);
          });
        };
      })(this));
    };

    PgBrain.prototype.lpush = function(key, value) {
      return this.transaction((function(_this) {
        return function() {
          return _this.lgetall(key).then(function(values) {
            values = values || [];
            values.unshift(value);
            return _this.updateValue(_this.key(key), values);
          });
        };
      })(this));
    };

    PgBrain.prototype.rpush = function(key, value) {
      return this.transaction((function(_this) {
        return function() {
          return _this.lgetall(key).then(function(values) {
            values = values || [];
            values.push(value);
            return _this.updateValue(_this.key(key), values);
          });
        };
      })(this));
    };

    PgBrain.prototype.lpop = function(key) {
      return this.transaction((function(_this) {
        return function() {
          return _this.lgetall(key).then(function(values) {
            var value;
            if (values) {
              value = values.shift();
              return _this.updateValue(_this.key(key), values).then(function() {
                return value;
              });
            } else {
              return null;
            }
          });
        };
      })(this));
    };

    PgBrain.prototype.rpop = function(key) {
      return this.transaction((function(_this) {
        return function() {
          return _this.lgetall(key).then(function(values) {
            var value;
            if (values) {
              value = values.pop();
              return _this.updateValue(_this.key(key), values).then(function() {
                return value;
              });
            } else {
              return null;
            }
          });
        };
      })(this));
    };

    PgBrain.prototype.lindex = function(key, index) {
      return this.query("SELECT value -> $1::int AS value FROM " + this.tableName + " WHERE key = $2 AND value @> '[]'", [index, this.key(key)]).then((function(_this) {
        return function(results) {
          var _ref1;
          return _this.deserialize(((_ref1 = results[0]) != null ? _ref1.value : void 0) || null);
        };
      })(this));
    };

    PgBrain.prototype.lgetall = function(key) {
      return this.getValues(this.key(key)).then(function(results) {
        return results[0];
      });
    };

    PgBrain.prototype.lrange = function(key, start, end) {
      return this.lgetall(key).then((function(_this) {
        return function(values) {
          if (values) {
            return values.slice(start, end + 1);
          } else {
            return null;
          }
        };
      })(this));
    };

    PgBrain.prototype.lrem = function(key, value) {
      return this.transaction((function(_this) {
        return function() {
          return _this.lgetall(key).then(function(values) {
            var newValues, serialized;
            serialized = _this.serialize(value);
            newValues = _.without(_.map(values, _this.serialize.bind(_this)), serialized);

            /*
            #TODO inefficient
             */
            newValues = _.map(newValues, function(value) {
              return _this.deserialize(value, true);
            });
            return _this.updateValue(_this.key(key), newValues).then(function() {
              return values.length - newValues.length;
            });
          });
        };
      })(this));
    };

    PgBrain.prototype.sadd = function(key, value) {
      return this.transaction((function(_this) {
        return function() {
          return _this.sismember(key, value).then(function(isMemeber) {
            if (isMemeber) {
              return -1;
            }
            return _this.lgetall(key).then(function(values) {
              values = values || [];
              values.push(value);
              return _this.updateValue(_this.key(key), values, true);
            });
          });
        };
      })(this));
    };

    PgBrain.prototype.sismember = function(key, value) {
      return this.query("SELECT 1 FROM (SELECT jsonb_array_elements(value) AS elem FROM " + this.tableName + " WHERE isset = true AND value @> '[]' AND key = $1) AS foo WHERE foo.elem = $2::jsonb", [this.key(key), this.serialize(value)]).then(function(results) {
        return results.length > 0;
      });
    };

    PgBrain.prototype.srem = function(key, value) {
      return this.lrem(key, value);
    };

    PgBrain.prototype.scard = function(key) {
      return this.llen(key);
    };

    PgBrain.prototype.spop = function(key) {
      return this.rpop(key);
    };

    PgBrain.prototype.srandmember = function(key) {
      return this.query("SELECT foo.elem FROM (SELECT jsonb_array_elements(value) AS elem FROM " + this.tableName + " WHERE value @> '[]' AND key = $1) AS foo OFFSET (random() * (SELECT (CASE WHEN jsonb_array_length(value) > 0 THEN jsonb_array_length(value) - 1 ELSE 0 END) FROM " + this.tableName + " WHERE value @> '[]' AND key = $1)) LIMIT 1", [this.key(key)]).then((function(_this) {
        return function(results) {
          if (results.length === 0) {
            return null;
          }
          return _this.deserialize(results[0].elem);
        };
      })(this));
    };

    PgBrain.prototype.smembers = function(key) {
      return this.lgetall(key);
    };

    PgBrain.prototype.keys = function(searchKey) {
      if (searchKey == null) {
        searchKey = '';
      }
      searchKey = this.key(searchKey);
      return this.query("SELECT DISTINCT key FROM " + this.tableName + " WHERE key ILIKE $1", [searchKey + "%"]).then((function(_this) {
        return function(results) {
          return _.map(results, function(result) {
            return _this.unkey(result.key);
          });
        };
      })(this));
    };

    PgBrain.prototype.type = function(key) {
      return this.query("SELECT (CASE WHEN isset THEN 'set' WHEN value @> '[]' THEN 'list' WHEN subkey IS NOT NULL THEN 'hash' ELSE 'object' END) AS type FROM " + this.tableName + " WHERE key = $1 LIMIT 1", [this.key(key)]).then(function(results) {
        var _ref1;
        return (_ref1 = results[0]) != null ? _ref1.type : void 0;
      });
    };

    PgBrain.prototype.types = function(keys) {
      return Q.all(_.map(keys, (function(_this) {
        return function(key) {
          return _this.type(key);
        };
      })(this)));
    };

    PgBrain.prototype.unkey = function(key) {
      return key.replace(this.prefixRegex, '');
    };

    PgBrain.prototype.key = function(key) {
      return this.prefix + ":" + key;
    };

    PgBrain.prototype.usersKey = function() {
      return "users";
    };

    PgBrain.prototype.subkeyExists = function(table, key) {
      return this.query("SELECT 1 FROM " + this.tableName + " WHERE key = $1 AND subkey = $2 LIMIT 1", [table, key]).then(function(results) {
        return results.length > 0;
      });
    };

    PgBrain.prototype.keyExists = function(key) {
      return this.query("SELECT 1 FROM " + this.tableName + " WHERE key = $1 LIMIT 1", [key]).then(function(results) {
        return results.length > 0;
      });
    };

    PgBrain.prototype.exists = function(key) {
      return this.keyExists(this.key(key));
    };

    PgBrain.prototype.get = function(key) {
      return this.getValues(this.key(key)).then(function(results) {
        return results[0] || null;
      });
    };

    PgBrain.prototype.set = function(key, value) {
      return this.updateValue(this.key(key), value);
    };

    PgBrain.prototype.remove = function(key) {
      return this.query("DELETE FROM " + this.tableName + " WHERE key = $1", [this.key(key)]);
    };

    PgBrain.prototype.incrby = function(key, num) {
      return this.transaction((function(_this) {
        return function() {
          var updateValue;
          updateValue = _this.get(key).then(function(val) {
            key = _this.key(key);
            if (val != null) {
              num = val + num;
              return _this.query("UPDATE " + _this.tableName + " SET value = $1 WHERE key = $2", [num, key]);
            } else {
              return _this.query("INSERT INTO " + _this.tableName + " (key, value) VALUES ($1, $2)", [key, num]);
            }
          });
          return updateValue.then(function() {
            return num;
          });
        };
      })(this));
    };

    PgBrain.prototype.hkeys = function(table) {
      return this.query("SELECT subkey FROM " + this.tableName + " WHERE key = $1", [this.key(table)]).then((function(_this) {
        return function(results) {
          return _.map(results, function(result) {
            return result.subkey;
          });
        };
      })(this));
    };

    PgBrain.prototype.hvals = function(table) {
      return this.getValues(this.key(table));
    };

    PgBrain.prototype.hlen = function(table) {
      return this.query("SELECT COUNT(*) AS count FROM " + this.tableName + " WHERE key = $1 GROUP BY key", [this.key(table)]).then(function(results) {
        var _ref1;
        return parseInt((_ref1 = results[0]) != null ? _ref1.count : void 0) || 0;
      });
    };

    PgBrain.prototype.hset = function(table, key, value) {
      return this.updateSubValue(this.key(table), key, value);
    };

    PgBrain.prototype.hget = function(table, key) {
      return this.getValues(this.key(table), key).then(function(results) {
        return results[0];
      });
    };

    PgBrain.prototype.hdel = function(table, key) {
      return this.query("DELETE FROM " + this.tableName + " WHERE key = $1 AND subkey = $2", [this.key(table), key]);
    };

    PgBrain.prototype.hgetall = function(table) {
      return this.query("SELECT subkey, value FROM " + this.tableName + " WHERE key = $1", [this.key(table)]).then((function(_this) {
        return function(results) {
          var map;
          map = new Map();
          _.each(results, function(result) {
            return map.set(result.subkey, _this.deserialize(result.value));
          });
          return map;
        };
      })(this));
    };

    PgBrain.prototype.hincrby = function(table, key, num) {
      return this.transaction((function(_this) {
        return function() {
          var updateValue;
          updateValue = _this.hget(table, key).then(function(val) {
            table = _this.key(table);
            if (val != null) {
              num = val + num;
              return _this.query("UPDATE " + _this.tableName + " SET value = $1 WHERE key = $2 AND subkey = $3", [num, table, key]);
            } else {
              return _this.query("INSERT INTO " + _this.tableName + " (key, subkey, value) VALUES ($1, $2, $3)", [table, key, num]);
            }
          });
          return updateValue.then(function() {
            return num;
          });
        };
      })(this));
    };

    PgBrain.prototype.close = function() {
      return this.client.end();
    };

    PgBrain.prototype.serialize = function(value) {
      return JSON.stringify(value);
    };

    PgBrain.prototype.deserialize = function(value, force) {
      if (force) {
        return JSON.parse(value.toString());
      }

      /*
      #json apparently gets deserialized by pg
       */
      return value;
    };

    PgBrain.prototype.serializeUser = function(user) {
      return this.serialize(user);
    };

    PgBrain.prototype.deserializeUser = function(obj) {
      if (obj) {
        obj = this.deserialize(obj);
        if (obj && obj.id) {
          return new User(obj.id, obj);
        }
      }
      return null;
    };

    PgBrain.prototype.users = function() {
      return this.getValues(this.usersKey()).then((function(_this) {
        return function(results) {
          return _.map(results, function(result) {
            return _this.deserializeUser(result.value);
          });
        };
      })(this));
    };

    PgBrain.prototype.addUser = function(user) {
      return this.updateSubValue(this.usersKey(), user.id, user);
    };

    PgBrain.prototype.userForId = function(id, options) {
      return this.getValues(this.usersKey(), id).then((function(_this) {
        return function(results) {
          var user;
          user = results[0];
          if (user) {
            user = _this.deserializeUser(user);
          }
          if (!user || (options && options.room && (user.room !== options.room))) {
            return _this.addUser(new User(id, options));
          }
          return user;
        };
      })(this));
    };

    PgBrain.prototype.userForName = function(name) {
      name = name.toLowerCase();
      return this.query("SELECT value FROM " + this.tableName + " WHERE key = $1 AND value ->> 'name' = $2", [this.usersKey(), name]).then((function(_this) {
        return function(results) {
          var _ref1;
          return _this.deserializeUser((_ref1 = results[0]) != null ? _ref1.value : void 0);
        };
      })(this));
    };

    PgBrain.prototype.usersForRawFuzzyName = function(fuzzyName) {
      fuzzyName = fuzzyName.toLowerCase();
      return this.query("SELECT value FROM " + this.tableName + " WHERE key = $1 AND value ->> 'name' ILIKE $2", [this.usersKey(), fuzzyName + "%"]).then((function(_this) {
        return function(results) {
          return _.map(results, function(result) {
            return _this.deserializeUser(result.value);
          });
        };
      })(this));
    };

    PgBrain.prototype.usersForFuzzyName = function(fuzzyName) {
      fuzzyName = fuzzyName.toLowerCase();
      return this.usersForRawFuzzyName(fuzzyName).then(function(matchedUsers) {
        var exactMatch;
        exactMatch = _.find(matchedUsers, function(user) {
          return user.name.toLowerCase() === fuzzyName;
        });
        return exactMatch && [exactMatch] || matchedUsers;
      });
    };

    return PgBrain;

  })(Brain);

  module.exports = PgBrain;

}).call(this);
